name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      run: |
        cd app/src
        go mod download
        
    - name: Run tests
      run: |
        cd app/src
        go test -v ./...
        
    - name: Build application
      run: |
        cd app/src
        go build -o main .
        
    - name: Test Docker build
      run: |
        cd app
        docker build -t my-go-app .
        
    - name: Test Docker run
      run: |
        cd app
        docker run --rm -d -p 8080:8080 --name test-container my-go-app
        sleep 5
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost:8080/ || exit 1
        docker stop test-container
        
    - name: Configure AWS credentials
      if: github.ref == 'refs/heads/main'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
        
    - name: Login to Amazon ECR
      if: github.ref == 'refs/heads/main'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push image to Amazon ECR
      if: github.ref == 'refs/heads/main'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: go-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image once
        cd app
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        
        # Tag as latest
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Push images to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "âœ… Successfully pushed to ECR:"
        echo "   - $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "   - $ECR_REGISTRY/$ECR_REPOSITORY:latest"

